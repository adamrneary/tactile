// Generated by CoffeeScript 1.4.0

describe('Area renderer', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Area renderer: initialize', function(done) {
    return done();
  });
  it('Area renderer: seriesPathFactory', function(done) {
    return done();
  });
  it('Area renderer: seriesStrokeFactory', function(done) {
    return done();
  });
  return it('Area renderer: render', function(done) {
    return done();
  });
});

describe('Axis time', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Axis time: constructor', function(done) {
    return done();
  });
  it('Axis time: appropriateTimeUnit', function(done) {
    return done();
  });
  it('Axis time: tickOffsets', function(done) {
    return done();
  });
  return it('Axis time: render', function(done) {
    return done();
  });
});

describe('Axis y', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Axis y: constructor', function(done) {
    return done();
  });
  return it('Axis y: render', function(done) {
    return done();
  });
});

describe('Chart', function() {
  var data, frameVal;
  frameVal = [0, 4];
  data = [
    {
      x: 0,
      y: 10,
      z: 0
    }, {
      x: 1,
      y: 170,
      z: 200
    }, {
      x: 2,
      y: 280,
      z: 120
    }, {
      x: 3,
      y: 205,
      z: 240
    }, {
      x: 4,
      y: 280,
      z: 120
    }, {
      x: 5,
      y: 205,
      z: 240
    }, {
      x: 6,
      y: 280,
      z: 120
    }, {
      x: 7,
      y: 205,
      z: 240
    }, {
      x: 8,
      y: 120,
      z: 490
    }
  ];
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Chart: constructor', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart({
      unstack: false
    }).data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(_chart);
    return done();
  });
  it('Chart: addSeries', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart();
    _chart.addSeries([
      {
        name: "enemies",
        renderer: "area",
        sigfigs: 0,
        draggable: true,
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].y = y;
        },
        color: "#c05020",
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.y
          };
        }
      }, {
        name: "friends",
        renderer: "area",
        sigfigs: 1,
        color: "#6060c0",
        draggable: true,
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].z = y;
        },
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.z
          };
        }
      }
    ]);
    assert(_chart.series[_chart.series.length - 2].name === 'enemies');
    assert(_chart.series[_chart.series.length - 1].name === 'friends');
    assert(_chart.series[_chart.series.length - 2].renderer === 'area');
    assert(_chart.series[_chart.series.length - 1].renderer === 'area');
    assert(_chart.series[_chart.series.length - 2].color === '#c05020');
    assert(_chart.series[_chart.series.length - 1].color === '#6060c0');
    assert(typeof _chart.series[_chart.series.length - 2].dataTransform === 'function');
    assert(typeof _chart.series[_chart.series.length - 1].dataTransform === 'function');
    assert(typeof _chart.series[_chart.series.length - 2].afterDrag === 'function');
    assert(typeof _chart.series[_chart.series.length - 1].afterDrag === 'function');
    assert(_chart.series[_chart.series.length - 2].draggable === true);
    assert(_chart.series[_chart.series.length - 1].draggable === true);
    return done();
  });
  it('Chart: initSeriesStackData', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    _chart.addSeries([
      {
        name: "enemies",
        renderer: "area",
        sigfigs: 0,
        draggable: true,
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].y = y;
        },
        color: "#c05020",
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.y
          };
        }
      }, {
        name: "friends",
        renderer: "area",
        sigfigs: 1,
        color: "#6060c0",
        draggable: true,
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].z = y;
        },
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.z
          };
        }
      }
    ]);
    assert(typeof _chart.initSeriesStackData === 'function');
    assert(typeof _chart.initSeriesStackData());
    assert(typeof _chart.initSeriesStackData({
      overwrite: true
    }));
    return done();
  });
  it('Chart: render', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.render === 'function');
    assert(typeof _chart.render());
    return done();
  });
  it('Chart: update', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.update === 'function');
    assert(typeof _chart.update());
    return done();
  });
  it('Chart: discoverRange', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.discoverRange === 'function');
    return done();
  });
  it('Chart: findAxis', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.findAxis === 'function');
    return done();
  });
  it('Chart: dataDomain', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.dataDomain === 'function');
    return done();
  });
  it('Chart: stackData', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.stackData === 'function');
    return done();
  });
  it('Chart: setSize function', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart();
    _chart.setSize({
      width: 700,
      height: 450
    });
    _chart.update();
    assert(_chart.width() === 700 - _chart.margin.left - _chart.margin.right - _chart.padding.left - _chart.padding.right);
    assert(_chart.height() === 450 - _chart.margin.top - _chart.margin.bottom - _chart.padding.top - _chart.padding.bottom);
    return done();
  });
  it('Chart: onUpdate', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.onUpdate === 'function');
    return done();
  });
  it('Chart: initRenderers', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.initRenderers === 'function');
    return done();
  });
  it('Chart: renderersByType', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.renderersByType === 'function');
    return done();
  });
  it('Chart: stackTransition', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.stackTransition === 'function');
    return done();
  });
  it('Chart: unstackTransition', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart().data(data).width(680).height(400).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(typeof _chart.unstackTransition === 'function');
    return done();
  });
  it('Chart: element', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart();
    assert(typeof _chart.element === 'function');
    return done();
  });
  it('Chart: height function', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart();
    _chart = _chart.height(400);
    _chart.update();
    assert(_chart.height() === 400 - _chart.margin.top - _chart.margin.bottom - _chart.padding.top - _chart.padding.bottom);
    return done();
  });
  it('Chart: width function', function(done) {
    var width, _chart;
    _chart = new window.Tactile.Chart();
    _chart = _chart.width(680);
    _chart.update();
    width = 680 - _chart.margin.left - _chart.margin.right - _chart.padding.left - _chart.padding.right;
    assert(_chart.width() === width);
    return done();
  });
  it('Chart: data function', function(done) {
    var _chart;
    _chart = new window.Tactile.Chart();
    _chart.data(data);
    assert(_chart._data === data);
    return done();
  });
  it('Chart: axes function', function(done) {
    var _chart;
    frameVal = [0, 4];
    _chart = new window.Tactile.Chart();
    _chart.axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(_chart._axes.x.frame === frameVal);
    return done();
  });
  it("Chart: for all series don't disabled", function(done) {
    var res, _chart;
    _chart = new window.Tactile.Chart();
    res = _chart._allSeriesDisabled();
    assert(res);
    return done();
  });
  return it('Chart: for disable all series', function(done) {
    var res, _chart;
    _chart = new window.Tactile.Chart();
    _.each(_chart.series, function(s) {
      return s.disable();
    });
    res = _chart._allSeriesDisabled();
    assert(res === true);
    return done();
  });
});

describe('Column renderer', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Column renderer: initialize', function(done) {
    return done();
  });
  it('Column renderer: render', function(done) {
    return done();
  });
  it('Column renderer: setupTooltips', function(done) {
    return done();
  });
  it('Column renderer: barWidth', function(done) {
    return done();
  });
  it('Column renderer: stackTransition', function(done) {
    return done();
  });
  return it('Column renderer: unstackTransition', function(done) {
    return done();
  });
});

describe('Donut renderer', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Donut renderer: initialize', function(done) {
    var _donutRenderer;
    _donutRenderer = new window.Tactile.DonutRenderer();
    assert(_donutRenderer.initialize());
    return done();
  });
  return it('Donut renderer: render', function(done) {
    var _donutRenderer;
    _donutRenderer = new window.Tactile.DonutRenderer();
    return done();
  });
});

describe('Dragger', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Dragger: constructor', function(done) {
    return done();
  });
  it('Dragger: makeHandlers', function(done) {
    return done();
  });
  it('Dragger: updateDraggedNode', function(done) {
    return done();
  });
  return it('Dragger: update', function(done) {
    return done();
  });
});

describe('Fixtures time', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Fixtures time: constructor', function(done) {
    return done();
  });
  it('Fixtures time: unit', function(done) {
    return done();
  });
  it('Fixtures time: formatDate', function(done) {
    return done();
  });
  it('Fixtures time: formatTime', function(done) {
    return done();
  });
  return it('Fixtures time: ceil', function(done) {
    return done();
  });
});

describe('Gauge renderer', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Gauge renderer: render', function(done) {
    return done();
  });
  it('Gauge renderer: renderLabels', function(done) {
    return done();
  });
  return it('Gauge renderer: domain', function(done) {
    return done();
  });
});

describe('Line renderer', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Line renderer: seriesPathFactory', function(done) {
    return done();
  });
  it('Line renderer: initialize', function(done) {
    return done();
  });
  return it('Line renderer: render', function(done) {
    return done();
  });
});

describe('Range slider', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Range slider: constructor', function(done) {
    return done();
  });
  return it('Range slider: updateGraph', function(done) {
    return done();
  });
});

describe('Renderer base', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Renderer base: constructor', function(done) {
    var _rendererBase;
    _rendererBase = new window.Tactile.RendererBase();
    assert(_rendererBase);
    return done();
  });
  it('Renderer base: domain', function(done) {
    var _rendererBase;
    _rendererBase = new window.Tactile.RendererBase();
    return done();
  });
  it('Renderer base: render', function(done) {
    var _rendererBase;
    _rendererBase = new window.Tactile.RendererBase();
    return done();
  });
  it('Renderer base: seriesCanvas', function(done) {
    var _rendererBase;
    _rendererBase = new window.Tactile.RendererBase();
    return done();
  });
  return it('Renderer base: configure', function(done) {
    var _rendererBase;
    _rendererBase = new window.Tactile.RendererBase();
    return done();
  });
});

describe('Scatter renderer', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  return it('Scatter renderer: render', function(done) {
    return done();
  });
});

describe('Tooltip', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('Tooltip: constructor', function(done) {
    return done();
  });
  it('Tooltip: appendTooltip', function(done) {
    return done();
  });
  return it('Tooltip: annotate', function(done) {
    return done();
  });
});
