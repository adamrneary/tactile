// Generated by CoffeeScript 1.4.0

describe('Donut series', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('example', function(done) {
    var chart, data;
    data = [
      {
        label: "FL",
        val: 40000
      }, {
        label: "CA",
        val: 30000
      }, {
        label: "NY",
        val: 20000
      }, {
        label: "NC",
        val: 30000
      }, {
        label: "SC",
        val: 40000
      }, {
        label: "AZ",
        val: 50000
      }, {
        label: "TX",
        val: 60000
      }
    ];
    chart = new window.Tactile.Chart().element(window.$("#example_view")[0]).width(680).height(400).data(data);
    chart.addSeries({
      name: "donut",
      renderer: "donut",
      color: "#c05020"
    });
    chart.render();
    console.log(chart);
    return done();
  });
  return it('appendTooltip', function(done) {
    return done();
  });
});

describe('Chart', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  it('example', function(done) {
    var Chart;
    Chart = new window.Tactile.Chart();
    Chart.render();
    return done();
  });
  it("Chart: check data function", function(done) {
    var Chart, data;
    Chart = new window.Tactile.Chart();
    data = [
      {
        x: 0,
        y: 10,
        z: 0
      }, {
        x: 1,
        y: 170,
        z: 200
      }, {
        x: 2,
        y: 280,
        z: 120
      }, {
        x: 3,
        y: 205,
        z: 240
      }, {
        x: 4,
        y: 280,
        z: 120
      }, {
        x: 5,
        y: 205,
        z: 240
      }, {
        x: 6,
        y: 280,
        z: 120
      }, {
        x: 7,
        y: 205,
        z: 240
      }, {
        x: 8,
        y: 120,
        z: 490
      }
    ];
    Chart.data(data).render();
    assert(Chart._data === data);
    return done();
  });
  it("Chart: check axes function", function(done) {
    var Chart, frameVal;
    Chart = new window.Tactile.Chart();
    frameVal = [0, 4];
    Chart.axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    assert(Chart._axes.x.frame === frameVal);
    return done();
  });
  it("Chart: check element function", function(done) {
    var Chart;
    Chart = new window.Tactile.Chart();
    Chart.element(window.$("#example_view")[0]);
    assert(Chart._element === window.$("#example_view")[0]);
    return done();
  });
  it('addSeries', function(done) {
    var Chart, enemies, friends;
    Chart = new window.Tactile.Chart();
    Chart.addSeries([
      {
        name: "enemies",
        renderer: "area",
        sigfigs: 0,
        draggable: true,
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].y = y;
        },
        color: "#c05020",
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.y
          };
        }
      }, {
        name: "friends",
        renderer: "area",
        sigfigs: 1,
        color: "#6060c0",
        draggable: true,
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].z = y;
        },
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.z
          };
        }
      }
    ]);
    enemies = Chart.series[Chart.series.length - 2];
    friends = Chart.series[Chart.series.length - 1];
    assert(enemies.name === 'enemies');
    assert(friends.name === 'friends');
    assert(enemies.renderer === 'area');
    assert(friends.renderer === 'area');
    assert(enemies.color === '#c05020');
    assert(friends.color === '#6060c0');
    assert(typeof enemies.dataTransform === 'function');
    assert(typeof friends.dataTransform === 'function');
    assert(typeof enemies.afterDrag === 'function');
    assert(typeof friends.afterDrag === 'function');
    assert(enemies.draggable === true);
    assert(friends.draggable === true);
    return done();
  });
  it('slider', function(done) {
    var Chart, data, frameVal, res, sl;
    Chart = new window.Tactile.Chart();
    frameVal = [0, 4];
    data = [
      {
        x: 0,
        y: 10,
        z: 0
      }, {
        x: 1,
        y: 170,
        z: 200
      }, {
        x: 2,
        y: 280,
        z: 120
      }, {
        x: 3,
        y: 205,
        z: 240
      }, {
        x: 4,
        y: 280,
        z: 120
      }, {
        x: 5,
        y: 205,
        z: 240
      }, {
        x: 6,
        y: 280,
        z: 120
      }, {
        x: 7,
        y: 205,
        z: 240
      }, {
        x: 8,
        y: 120,
        z: 490
      }
    ];
    sl = window.$("<div>").attr("id", "slider");
    window.$("#example_view").append(sl);
    sl.slider({
      min: 0,
      max: 8,
      values: frameVal,
      range: true,
      slide: function(event, ui) {
        return Chart.axes().x.frame = ui.values;
      }
    });
    console.log('yere');
    console.log(Chart.series);
    _.each(Chart.series, function(s) {
      return s.enabled();
    });
    res = Chart._allSeriesDisabled();
    console.log(res);
    return done();
  });
  it("Chart: check for all series disabled", function(done) {
    var Chart, res;
    Chart = new window.Tactile.Chart();
    _.each(Chart.series, function(s) {
      return s.enabled();
    });
    res = Chart._allSeriesDisabled();
    return done();
  });
  it("Chart: check for disable all series", function(done) {
    var Chart, res;
    Chart = new window.Tactile.Chart();
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    assert(res === true);
    return done();
  });
  it("Chart: check setSize function", function(done) {
    var Chart, height, heightMargin, heightPadding, width, widthMargin, widthPadding;
    Chart = new window.Tactile.Chart();
    Chart.setSize({
      width: 700,
      height: 450
    });
    Chart.update();
    widthMargin = Chart.margin.left + Chart.margin.right;
    widthPadding = Chart.padding.left + Chart.padding.right;
    heightMargin = Chart.margin.top + Chart.margin.bottom;
    heightPadding = Chart.padding.top + Chart.padding.bottom;
    width = widthMargin + widthPadding;
    height = heightMargin + heightPadding;
    assert(Chart.width() === (700 - width));
    assert(Chart.height() === (450 - height));
    return done();
  });
  it("Chart: check height function", function(done) {
    var Chart, height, heightMargin, heightPadding;
    Chart = new window.Tactile.Chart();
    Chart = Chart.height(400);
    Chart.update();
    heightMargin = Chart.margin.top + Chart.margin.bottom;
    heightPadding = Chart.padding.top + Chart.padding.bottom;
    height = heightMargin + heightPadding;
    assert(Chart.height() === 400 - height);
    return done();
  });
  it("Chart: check width function", function(done) {
    var Chart, width, widthMargin, widthPadding;
    Chart = new window.Tactile.Chart();
    Chart = Chart.width(680);
    Chart.update();
    widthMargin = Chart.margin.left + Chart.margin.right;
    widthPadding = Chart.padding.left + Chart.padding.right;
    width = 680 - widthMargin - widthPadding;
    assert(Chart.width() === width);
    return done();
  });
  it('Tactile.Chart().render is function', function(done) {
    var Chart;
    Chart = new window.Tactile.Chart();
    assert(typeof Chart.render === 'function');
    return done();
  });
  it('Tactile.Chart().initSeriesStackData is function', function(done) {
    var Chart;
    Chart = new window.Tactile.Chart();
    assert(typeof Chart.initSeriesStackData === 'function');
    return done();
  });
  return it('Tactile.Chart().element is function', function(done) {
    var Chart;
    Chart = new window.Tactile.Chart();
    assert(typeof Chart.element === 'function');
    return done();
  });
});

describe('Line series', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      return done();
    });
  });
  return it('example', function(done) {
    var chart, data, frameVal;
    frameVal = [0, 4];
    data = [
      {
        x: 0,
        y: 10,
        z: 0
      }, {
        x: 1,
        y: 170,
        z: 200
      }, {
        x: 2,
        y: 280,
        z: 100
      }, {
        x: 3,
        y: 205,
        z: 240
      }, {
        x: 4,
        y: 280,
        z: 100
      }, {
        x: 5,
        y: 205,
        z: 240
      }, {
        x: 6,
        y: 280,
        z: 100
      }, {
        x: 7,
        y: 205,
        z: 240
      }, {
        x: 8,
        y: 332,
        z: 490
      }
    ];
    chart = new window.Tactile.Chart().element(window.$("#example_view")[0]).data(data).axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    chart.addSeries({
      name: "enemies",
      renderer: "line",
      color: "#c05020",
      tooltip: function(d) {
        return d.y + " enemies";
      },
      dataTransform: function(d) {
        return {
          x: d.x,
          y: d.y
        };
      }
    });
    chart.addSeries({
      name: "friends",
      renderer: "line",
      sigfigs: 1,
      color: "#6060c0",
      draggable: true,
      afterDrag: function(d, y, i, draggedSeries, graph) {
        return graph.data()[i].z = y;
      },
      tooltip: function(d) {
        return d.y + " friends";
      },
      dataTransform: function(d) {
        return {
          x: d.x,
          y: d.z
        };
      }
    });
    chart.render();
    return done();
  });
});
