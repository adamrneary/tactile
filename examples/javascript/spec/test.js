// Generated by CoffeeScript 1.3.3
var jasmine;

describe('Line series', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        x: 0,
        y: 10,
        z: 0
      }, {
        x: 1,
        y: 170,
        z: 200
      }, {
        x: 2,
        y: 280,
        z: 100
      }, {
        x: 3,
        y: 205,
        z: 240
      }, {
        x: 4,
        y: 280,
        z: 100
      }, {
        x: 5,
        y: 205,
        z: 240
      }, {
        x: 6,
        y: 280,
        z: 100
      }, {
        x: 7,
        y: 205,
        z: 240
      }, {
        x: 8,
        y: 332,
        z: 490
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check axes function", function() {
    var frameVal;
    frameVal = [0, 8];
    Chart.axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    return expect(Chart._axes.x.frame).toEqual(frameVal);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries({
      name: "enemies",
      renderer: "line",
      color: "#c05020",
      sigfigs: 1,
      draggable: true,
      afterDrag: function(d, y, i, draggedSeries, graph) {
        return graph.data()[i].z = y;
      },
      tooltip: function(d) {
        return d.y + " enemies";
      },
      dataTransform: function(d) {
        return {
          x: d.x,
          y: d.y
        };
      }
    });
    expect(Chart.series[Chart.series.length - 1].name).toBe('enemies');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('line');
    expect(Chart.series[Chart.series.length - 1].color).toBe('#c05020');
    expect(Chart.series[Chart.series.length - 1].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].afterDrag).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].sigfigs).toEqual(1);
    return expect(Chart.series[Chart.series.length - 1].draggable).toEqual(true);
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 720,
      height: 420
    });
    Chart.update();
    expect(Chart.width()).toEqual(720 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(420 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(450);
    Chart.update();
    return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(700);
    Chart.update();
    return expect(Chart.width()).toEqual(700 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

jasmine = jasmine;

describe("Chart: ", function() {
  it('Chart object has all fields', function() {
    var Chart;
    expect(Tactile).toEqual(jasmine.any(Object));
    Chart = new Tactile.Chart();
    expect(Chart).toEqual(jasmine.any(Object));
    expect(Chart.innerHeight).toEqual(jasmine.any(Number));
    expect(Chart.innerWidth).toEqual(jasmine.any(Number));
    expect(Chart.marginedHeight).toEqual(jasmine.any(Number));
    expect(Chart.marginedWidth).toEqual(jasmine.any(Number));
    expect(Chart.outerHeight).toEqual(jasmine.any(Number));
    expect(Chart.outerWidth).toEqual(jasmine.any(Number));
    expect(Chart._slice).toEqual(jasmine.any(Function));
    expect(Chart._axes).toEqual(jasmine.any(Object));
    expect(Chart._axes.x).toEqual(jasmine.any(Object));
    expect(Chart._axes.x.dimension).toEqual(jasmine.any(String));
    expect(Chart._axes.x.frame).toEqual(jasmine.any(Array));
    expect(Chart._axes.x.frame.length).toEqual(2);
    expect(Chart._axes.y).toEqual(jasmine.any(Object));
    expect(Chart._axes.y.dimension).toEqual(jasmine.any(String));
    expect(Chart._axes.y.frame).toEqual(jasmine.any(Array));
    expect(Chart._axes.y.frame.length).toEqual(2);
    expect(Chart.discoverRange).toEqual(jasmine.any(Function));
    expect(Chart.renderers).toEqual(jasmine.any(Array));
    expect(Chart.series).toEqual(jasmine.any(Array));
    expect(Chart.updateCallbacks).toEqual(jasmine.any(Array));
    expect(Chart.updateCallbacks[0]).toEqual(jasmine.any(Function));
    expect(Chart.updateCallbacks[1]).toEqual(jasmine.any(Function));
    return expect(Chart.addSeries).toEqual(jasmine.any(Function));
  });
  it("Tooltip: spotlightOn function should be turn on spotlight", function() {
    Tactile.Tooltip.spotlightOn();
    return expect(Tactile.Tooltip.getSpotlight()).toEqual(true);
  });
  return it("Tooltip: turnOffspotlight function should be turn off spotlight", function() {
    Tactile.Tooltip.turnOffspotlight();
    return expect(Tactile.Tooltip.getSpotlight()).toEqual(false);
  });
});

describe('Scatter series', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it('addSeries', function() {
    Chart.addSeries([
      {
        name: "actual-planned-dots",
        renderer: "scatter",
        color: "#F52A2D",
        cssConditions: function(d) {
          if (d.r < d.y) {
            return "low";
          }
          if (d.r === d.y) {
            return "mid";
          }
          if (d.r > d.y) {
            return "high";
          }
          return "";
        },
        tooltip: function(d) {
          return d.y + " planned, got " + d.r;
        },
        dataTransform: function(d) {
          return {
            x: d.period,
            y: d.plan,
            r: d.actual
          };
        }
      }
    ]);
    expect(Chart.series[Chart.series.length - 1].name).toBe('actual-planned-dots');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('scatter');
    expect(Chart.series[Chart.series.length - 1].color).toBe('#F52A2D');
    expect(Chart.series[Chart.series.length - 1].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
    return expect(Chart.series[Chart.series.length - 1].cssConditions).toEqual(jasmine.any(Function));
  });
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        period: 1325376000,
        actual: 14,
        plan: 5
      }, {
        period: 1328054400,
        actual: 16,
        plan: 10
      }, {
        period: 1330560000,
        actual: 12,
        plan: 19
      }, {
        period: 1333238400,
        actual: 13,
        plan: 33
      }, {
        period: 1335830400,
        actual: 16,
        plan: 15
      }, {
        period: 1338508800,
        actual: 25,
        plan: 25
      }, {
        period: 1341100800,
        actual: 16,
        plan: 15
      }, {
        period: 1343779200,
        actual: 16,
        plan: 33
      }, {
        period: 1346457600,
        actual: 12,
        plan: 15
      }, {
        period: 1349049600,
        actual: 14,
        plan: 10
      }, {
        period: 1351728000,
        actual: 16,
        plan: 9
      }, {
        period: 1354320000,
        actual: 15,
        plan: 14
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(450);
    Chart.update();
    return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 720,
      height: 420
    });
    Chart.update();
    expect(Chart.width()).toEqual(720 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(420 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(700);
    Chart.update();
    return expect(Chart.width()).toEqual(700 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

describe('Gauge series', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        value: 1,
        min: -10,
        max: 10
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries({
      name: 'gauge',
      renderer: "gauge",
      labels: true
    });
    expect(Chart.series[Chart.series.length - 1].name).toBe('gauge');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('gauge');
    return expect(Chart.series[Chart.series.length - 1].labels).toBe(true);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(450);
    Chart.update();
    return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 720,
      height: 420
    });
    Chart.update();
    expect(Chart.width()).toEqual(720 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(420 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(700);
    Chart.update();
    return expect(Chart.width()).toEqual(700 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

describe('Sliding timeframe series', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        x: 0,
        y: 10,
        z: 0
      }, {
        x: 1,
        y: 170,
        z: 200
      }, {
        x: 2,
        y: 280,
        z: 100
      }, {
        x: 3,
        y: 205,
        z: 300
      }, {
        x: 4,
        y: 332,
        z: 400
      }, {
        x: 5,
        y: 327,
        z: 450
      }, {
        x: 6,
        y: 332,
        z: 600
      }, {
        x: 7,
        y: 232,
        z: 601
      }, {
        x: 8,
        y: 402,
        z: 700
      }, {
        x: 9,
        y: 100,
        z: 430
      }, {
        x: 10,
        y: 134,
        z: 490
      }, {
        x: 11,
        y: 356,
        z: 450
      }, {
        x: 12,
        y: 339,
        z: 720
      }, {
        x: 13,
        y: 539,
        z: 650
      }, {
        x: 14,
        y: 650,
        z: 300
      }, {
        x: 15,
        y: 700,
        z: 100
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check axes function", function() {
    var frameVal;
    frameVal = [2, 10];
    Chart.axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    return expect(Chart._axes.x.frame).toEqual(frameVal);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries([
      {
        name: "xy",
        renderer: "line",
        color: "#c05020",
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.y
          };
        }
      }, {
        name: "xz",
        renderer: "line",
        color: "#6060c0",
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.z
          };
        }
      }
    ]);
    expect(Chart.series[Chart.series.length - 2].name).toBe('xy');
    expect(Chart.series[Chart.series.length - 1].name).toBe('xz');
    expect(Chart.series[Chart.series.length - 2].renderer).toBe('line');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('line');
    expect(Chart.series[Chart.series.length - 2].color).toBe('#c05020');
    expect(Chart.series[Chart.series.length - 1].color).toBe('#6060c0');
    expect(Chart.series[Chart.series.length - 2].dataTransform).toEqual(jasmine.any(Function));
    return expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(450);
    Chart.update();
    return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 680,
      height: 400
    });
    Chart.update();
    expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(400 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(680);
    Chart.update();
    return expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

describe('Column series', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        period: 1325376000,
        actual: 4,
        plan: 1
      }, {
        period: 1328054500,
        actual: 5,
        plan: 1
      }, {
        period: 1330560000,
        actual: 6,
        plan: 2
      }, {
        period: 1333238400,
        actual: 7,
        plan: 3
      }, {
        period: 1335830400,
        actual: 6,
        plan: 5
      }, {
        period: 1338508800,
        actual: 5,
        plan: 8
      }, {
        period: 1341100800,
        actual: 4,
        plan: 5
      }, {
        period: 1343779200,
        actual: 5,
        plan: 3
      }, {
        period: 1346457600,
        actual: 6,
        plan: 2
      }, {
        period: 1349049600,
        actual: 7,
        plan: 1
      }, {
        period: 1351728000,
        actual: 6,
        plan: 1
      }, {
        period: 1354320000,
        actual: 5,
        plan: 2
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries([
      {
        name: "reach actual",
        renderer: "column",
        sigfigs: 0,
        round: false,
        color: "#c05020",
        draggable: true,
        tooltip: function(d) {
          return d.y + " customers";
        },
        dataTransform: function(d) {
          return {
            x: d.period,
            y: d.actual
          };
        },
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph._data[i].actual = y;
        }
      }, {
        name: "planned",
        renderer: "column",
        round: false,
        color: "#6060c0",
        draggable: true,
        tooltip: function(d) {
          return d.y + " planned";
        },
        dataTransform: function(d) {
          return {
            x: d.period,
            y: d.plan
          };
        },
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph._data[i].plan = y;
        }
      }
    ]);
    expect(Chart.series[Chart.series.length - 2].name).toBe('reach actual');
    expect(Chart.series[Chart.series.length - 1].name).toBe('planned');
    expect(Chart.series[Chart.series.length - 2].renderer).toBe('column');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('column');
    expect(Chart.series[Chart.series.length - 2].sigfigs).toBe(0);
    expect(Chart.series[Chart.series.length - 2].color).toBe('#c05020');
    expect(Chart.series[Chart.series.length - 1].color).toBe('#6060c0');
    expect(Chart.series[Chart.series.length - 2].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].round).toBe(false);
    expect(Chart.series[Chart.series.length - 1].round).toBe(false);
    expect(Chart.series[Chart.series.length - 2].draggable).toBe(true);
    return expect(Chart.series[Chart.series.length - 1].draggable).toBe(true);
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(500);
    Chart.update();
    return expect(Chart.height()).toEqual(500 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 700,
      height: 500
    });
    Chart.update();
    expect(Chart.width()).toEqual(700 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(500 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(700);
    Chart.update();
    return expect(Chart.width()).toEqual(700 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

describe('Donut series', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        label: "FL",
        val: 40000
      }, {
        label: "CA",
        val: 30000
      }, {
        label: "NY",
        val: 20000
      }, {
        label: "NC",
        val: 30000
      }, {
        label: "SC",
        val: 40000
      }, {
        label: "AZ",
        val: 50000
      }, {
        label: "TX",
        val: 60000
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries({
      name: "donut",
      renderer: "donut",
      color: "#c05020"
    });
    expect(Chart.series[Chart.series.length - 1].name).toBe('donut');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('donut');
    return expect(Chart.series[Chart.series.length - 1].color).toBe('#c05020');
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 720,
      height: 420
    });
    Chart.update();
    expect(Chart.width()).toEqual(720 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(420 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(400);
    Chart.update();
    return expect(Chart.height()).toEqual(400 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(680);
    Chart.update();
    return expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

describe('Legend series', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        x: 0,
        y: 10,
        z: 0
      }, {
        x: 1,
        y: 170,
        z: 200
      }, {
        x: 2,
        y: 280,
        z: 100
      }, {
        x: 3,
        y: 205,
        z: 240
      }, {
        x: 4,
        y: 280,
        z: 100
      }, {
        x: 5,
        y: 205,
        z: 240
      }, {
        x: 6,
        y: 280,
        z: 100
      }, {
        x: 7,
        y: 205,
        z: 240
      }, {
        x: 8,
        y: 332,
        z: 490
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check axes function", function() {
    var frameVal;
    frameVal = [0, 4];
    Chart.axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    return expect(Chart._axes.x.frame).toEqual(frameVal);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries({
      name: "enemies",
      renderer: "line",
      color: "#c05020",
      tooltip: function(d) {
        return d.y + " enemies";
      },
      dataTransform: function(d) {
        return {
          x: d.x,
          y: d.y
        };
      }
    });
    Chart.addSeries({
      name: "friends",
      renderer: "column",
      sigfigs: 1,
      color: "#6060c0",
      draggable: true,
      afterDrag: function(d, y, i, draggedSeries, graph) {
        return graph.data()[i].z = y;
      },
      tooltip: function(d) {
        return d.y + " friends";
      },
      dataTransform: function(d) {
        return {
          x: d.x,
          y: d.z
        };
      }
    });
    expect(Chart.series[Chart.series.length - 2].name).toBe('enemies');
    expect(Chart.series[Chart.series.length - 1].name).toBe('friends');
    expect(Chart.series[Chart.series.length - 2].renderer).toBe('line');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('column');
    expect(Chart.series[Chart.series.length - 1].sigfigs).toBe(1);
    expect(Chart.series[Chart.series.length - 2].color).toBe('#c05020');
    expect(Chart.series[Chart.series.length - 1].color).toBe('#6060c0');
    expect(Chart.series[Chart.series.length - 2].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].draggable).toBe(true);
    return expect(Chart.series[Chart.series.length - 1].afterDrag).toEqual(jasmine.any(Function));
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 720,
      height: 420
    });
    Chart.update();
    expect(Chart.width()).toEqual(720 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(420 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(450);
    Chart.update();
    return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(700);
    Chart.update();
    return expect(Chart.width()).toEqual(700 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

describe('Area series', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        x: 0,
        y: 10,
        z: 0
      }, {
        x: 1,
        y: 170,
        z: 200
      }, {
        x: 2,
        y: 280,
        z: 120
      }, {
        x: 3,
        y: 205,
        z: 240
      }, {
        x: 4,
        y: 280,
        z: 120
      }, {
        x: 5,
        y: 205,
        z: 240
      }, {
        x: 6,
        y: 280,
        z: 120
      }, {
        x: 7,
        y: 205,
        z: 240
      }, {
        x: 8,
        y: 120,
        z: 490
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check axes function", function() {
    var frameVal;
    frameVal = [0, 4];
    Chart.axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    return expect(Chart._axes.x.frame).toEqual(frameVal);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries([
      {
        name: "enemies",
        renderer: "area",
        sigfigs: 0,
        draggable: true,
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].y = y;
        },
        color: "#c05020",
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.y
          };
        }
      }, {
        name: "friends",
        renderer: "area",
        sigfigs: 1,
        color: "#6060c0",
        draggable: true,
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].z = y;
        },
        dataTransform: function(d) {
          return {
            x: d.x,
            y: d.z
          };
        }
      }
    ]);
    expect(Chart.series[Chart.series.length - 2].name).toBe('enemies');
    expect(Chart.series[Chart.series.length - 1].name).toBe('friends');
    expect(Chart.series[Chart.series.length - 2].renderer).toBe('area');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('area');
    expect(Chart.series[Chart.series.length - 2].color).toBe('#c05020');
    expect(Chart.series[Chart.series.length - 1].color).toBe('#6060c0');
    expect(Chart.series[Chart.series.length - 2].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].afterDrag).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].afterDrag).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].draggable).toBe(true);
    return expect(Chart.series[Chart.series.length - 1].draggable).toBe(true);
  });
  it('slider', function() {
    var data, frameVal;
    frameVal = [0, 4];
    return data = [
      {
        x: 0,
        y: 10,
        z: 0
      }, {
        x: 1,
        y: 170,
        z: 200
      }, {
        x: 2,
        y: 280,
        z: 120
      }, {
        x: 3,
        y: 205,
        z: 240
      }, {
        x: 4,
        y: 280,
        z: 120
      }, {
        x: 5,
        y: 205,
        z: 240
      }, {
        x: 6,
        y: 280,
        z: 120
      }, {
        x: 7,
        y: 205,
        z: 240
      }, {
        x: 8,
        y: 120,
        z: 490
      }
    ];
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 700,
      height: 450
    });
    Chart.update();
    expect(Chart.width()).toEqual(700 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(400);
    Chart.update();
    return expect(Chart.height()).toEqual(400 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(680);
    Chart.update();
    return expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

describe('Multiple donuts timeframe', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        period: 1325376000,
        actual: 4,
        plan: 0
      }, {
        period: 1328054400,
        actual: 5,
        plan: 1
      }, {
        period: 1330560000,
        actual: 6,
        plan: 2
      }, {
        period: 1333238400,
        actual: 7,
        plan: 3
      }, {
        period: 1335830400,
        actual: 6,
        plan: 5
      }, {
        period: 1338508800,
        actual: 5,
        plan: 8
      }, {
        period: 1341100800,
        actual: 4,
        plan: 5
      }, {
        period: 1343779200,
        actual: 5,
        plan: 3
      }, {
        period: 1346457600,
        actual: 6,
        plan: 2
      }, {
        period: 1349049600,
        actual: 7,
        plan: 1
      }, {
        period: 1351728000,
        actual: 6,
        plan: 1
      }, {
        period: 1354320000,
        actual: 5,
        plan: 2
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check axes function", function() {
    var frameVal;
    frameVal = [1325376000, 1354320000];
    Chart.axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    return expect(Chart._axes.x.frame).toEqual(frameVal);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries([
      {
        name: "reach actual",
        renderer: "column",
        wide: true,
        draggable: true,
        round: true,
        color: "#6020c0",
        tooltip: function(d) {
          return d.y + " customers";
        },
        dataTransform: function(d) {
          return {
            x: d.period,
            y: d.actual
          };
        },
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].actual = y;
        }
      }, {
        name: "reach plan",
        renderer: "line",
        sigfigs: 0,
        color: "#c05020",
        draggable: true,
        tooltip: function(d) {
          return d.y + " customers planned";
        },
        dataTransform: function(d) {
          return {
            x: d.period,
            y: d.plan
          };
        },
        onDrag: function(d, series, graph) {},
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].plan = y;
        }
      }
    ]);
    expect(Chart.series[Chart.series.length - 2].name).toBe('reach actual');
    expect(Chart.series[Chart.series.length - 1].name).toBe('reach plan');
    expect(Chart.series[Chart.series.length - 2].renderer).toBe('column');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('line');
    expect(Chart.series[Chart.series.length - 2].color).toBe('#6020c0');
    expect(Chart.series[Chart.series.length - 1].color).toBe('#c05020');
    expect(Chart.series[Chart.series.length - 2].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].afterDrag).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].afterDrag).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].onDrag).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].wide).toBe(true);
    expect(Chart.series[Chart.series.length - 2].round).toBe(true);
    expect(Chart.series[Chart.series.length - 2].draggable).toBe(true);
    return expect(Chart.series[Chart.series.length - 1].draggable).toBe(true);
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(450);
    Chart.update();
    return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 680,
      height: 400
    });
    Chart.update();
    expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(400 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(680);
    Chart.update();
    return expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

describe('Multiple series timeframe', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        period: 1325376000,
        actual: 4,
        plan: 0
      }, {
        period: 1328054400,
        actual: 5,
        plan: 1
      }, {
        period: 1330560000,
        actual: 6,
        plan: 2
      }, {
        period: 1333238400,
        actual: 7,
        plan: 3
      }, {
        period: 1335830400,
        actual: 6,
        plan: 5
      }, {
        period: 1338508800,
        actual: 5,
        plan: 8
      }, {
        period: 1341100800,
        actual: 4,
        plan: 5
      }, {
        period: 1343779200,
        actual: 5,
        plan: 3
      }, {
        period: 1346457600,
        actual: 6,
        plan: 2
      }, {
        period: 1349049600,
        actual: 7,
        plan: 1
      }, {
        period: 1351728000,
        actual: 6,
        plan: 1
      }, {
        period: 1354320000,
        actual: 5,
        plan: 2
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check axes function", function() {
    var frameVal;
    frameVal = [1325376000, 1354320000];
    Chart.axes({
      x: {
        dimension: "time",
        frame: frameVal
      }
    });
    return expect(Chart._axes.x.frame).toEqual(frameVal);
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries([
      {
        name: "reach actual",
        renderer: "column",
        wide: true,
        draggable: true,
        round: true,
        color: "#6020c0",
        tooltip: function(d) {
          return d.y + " customers";
        },
        dataTransform: function(d) {
          return {
            x: d.period,
            y: d.actual
          };
        },
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].actual = y;
        }
      }, {
        name: "reach plan",
        renderer: "line",
        sigfigs: 0,
        color: "#c05020",
        draggable: true,
        tooltip: function(d) {
          return d.y + " customers planned";
        },
        dataTransform: function(d) {
          return {
            x: d.period,
            y: d.plan
          };
        },
        onDrag: function(d, series, graph) {},
        afterDrag: function(d, y, i, draggedSeries, graph) {
          return graph.data()[i].plan = y;
        }
      }
    ]);
    expect(Chart.series[Chart.series.length - 2].name).toBe('reach actual');
    expect(Chart.series[Chart.series.length - 1].name).toBe('reach plan');
    expect(Chart.series[Chart.series.length - 2].renderer).toBe('column');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('line');
    expect(Chart.series[Chart.series.length - 2].color).toBe('#6020c0');
    expect(Chart.series[Chart.series.length - 1].color).toBe('#c05020');
    expect(Chart.series[Chart.series.length - 2].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].afterDrag).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].afterDrag).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].onDrag).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].wide).toBe(true);
    expect(Chart.series[Chart.series.length - 2].round).toBe(true);
    expect(Chart.series[Chart.series.length - 2].draggable).toBe(true);
    return expect(Chart.series[Chart.series.length - 1].draggable).toBe(true);
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(450);
    Chart.update();
    return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 680,
      height: 400
    });
    Chart.update();
    expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(400 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(680);
    Chart.update();
    return expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});

describe('Stacked columb timeframe', function() {
  var Chart;
  Chart = new Tactile.Chart();
  it("Chart: check data function", function() {
    var data;
    data = [
      {
        period: 1325376000,
        actual: 4,
        plan: 1
      }, {
        period: 1328054400,
        actual: 5,
        plan: 1
      }, {
        period: 1330560000,
        actual: 6,
        plan: 2
      }, {
        period: 1333238400,
        actual: 7,
        plan: 3
      }, {
        period: 1335830400,
        actual: 6,
        plan: 5
      }, {
        period: 1338508800,
        actual: 5,
        plan: 8
      }, {
        period: 1341100800,
        actual: 4,
        plan: 5
      }, {
        period: 1343779200,
        actual: 5,
        plan: 3
      }, {
        period: 1346457600,
        actual: 6,
        plan: 2
      }, {
        period: 1349049600,
        actual: 7,
        plan: 1
      }, {
        period: 1351728000,
        actual: 6,
        plan: 1
      }, {
        period: 1354320000,
        actual: 5,
        plan: 2
      }
    ];
    Chart.data(data);
    return expect(Chart._data).toEqual(data);
  });
  it("Chart: check axes function", function() {
    var frameVal;
    frameVal = [1330560000, 1354320000];
    Chart.axes({
      y: "linear",
      x: {
        dimension: "time",
        frame: frameVal,
        options: {
          ticksTreatment: "align-middle"
        }
      }
    });
    expect(Chart._axes.x.frame).toEqual(frameVal);
    return expect(Chart._axes.y.dimension).toBe("linear");
  });
  it("Chart: check element function", function() {
    Chart.element($("#example_view")[0]);
    return expect(Chart._element).toEqual(($("#example_view")[0]));
  });
  it('addSeries', function() {
    Chart.addSeries({
      name: "reach actual",
      renderer: "column",
      round: false,
      color: "#c05020",
      tooltip: function(d) {
        return d.y + " customers";
      },
      dataTransform: function(d) {
        return {
          x: d.period,
          y: d.actual
        };
      }
    });
    Chart.addSeries([
      {
        name: "planned",
        renderer: "column",
        round: false,
        color: "#6060c0",
        tooltip: function(d) {
          return d.y + " planned";
        },
        dataTransform: function(d) {
          return {
            x: d.period,
            y: d.plan
          };
        }
      }, {
        name: "sum",
        renderer: "column",
        round: false,
        color: "#6020c0",
        tooltip: function(d) {
          return d.y + " sum";
        },
        dataTransform: function(d) {
          return {
            x: d.period,
            y: parseInt(d.plan + d.actual)
          };
        }
      }
    ]);
    expect(Chart.series[Chart.series.length - 3].name).toBe('reach actual');
    expect(Chart.series[Chart.series.length - 2].name).toBe('planned');
    expect(Chart.series[Chart.series.length - 1].name).toBe('sum');
    expect(Chart.series[Chart.series.length - 3].renderer).toBe('column');
    expect(Chart.series[Chart.series.length - 2].renderer).toBe('column');
    expect(Chart.series[Chart.series.length - 1].renderer).toBe('column');
    expect(Chart.series[Chart.series.length - 3].round).toBe(false);
    expect(Chart.series[Chart.series.length - 2].round).toBe(false);
    expect(Chart.series[Chart.series.length - 1].round).toBe(false);
    expect(Chart.series[Chart.series.length - 3].color).toBe("#c05020");
    expect(Chart.series[Chart.series.length - 2].color).toBe("#6060c0");
    expect(Chart.series[Chart.series.length - 1].color).toBe("#6020c0");
    expect(Chart.series[Chart.series.length - 3].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 3].tooltip).toEqual(jasmine.any(Function));
    expect(Chart.series[Chart.series.length - 2].tooltip).toEqual(jasmine.any(Function));
    return expect(Chart.series[Chart.series.length - 1].tooltip).toEqual(jasmine.any(Function));
  });
  it("Chart: check for all series don't disabled", function() {
    var res;
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(false);
  });
  it("Chart: check for disable all series", function() {
    var res;
    _.each(Chart.series, function(s) {
      return s.disable();
    });
    res = Chart._allSeriesDisabled();
    return expect(res).toEqual(true);
  });
  it("Chart: check height function", function() {
    Chart = Chart.height(450);
    Chart.update();
    return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check setSize function", function() {
    Chart.setSize({
      width: 680,
      height: 400
    });
    Chart.update();
    expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
    return expect(Chart.height()).toEqual(400 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
  });
  it("Chart: check width function", function() {
    Chart = Chart.width(680);
    Chart.update();
    return expect(Chart.width()).toEqual(680 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
  });
  it('Tactile.Chart().render is function', function() {
    return expect(Chart.render).toEqual(jasmine.any(Function));
  });
  it('Tactile.Chart().initSeriesStackData is function', function() {
    return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
  });
  return it('Tactile.Chart().element is function', function() {
    return expect(Chart.element).toEqual(jasmine.any(Function));
  });
});
