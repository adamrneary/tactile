// Generated by CoffeeScript 1.3.3
var Chart, chart, jasmine;

chart = '';

jasmine = jasmine;

Chart = null;

describe("Tactile", function() {
  return describe("Chart: ", function() {
    it('Chart object has all fields', function() {
      expect(Tactile).toEqual(jasmine.any(Object));
      Chart = new Tactile.Chart();
      expect(Chart).toEqual(jasmine.any(Object));
      expect(Chart.innerHeight).toEqual(jasmine.any(Number));
      expect(Chart.innerWidth).toEqual(jasmine.any(Number));
      expect(Chart.marginedHeight).toEqual(jasmine.any(Number));
      expect(Chart.marginedWidth).toEqual(jasmine.any(Number));
      expect(Chart.outerHeight).toEqual(jasmine.any(Number));
      expect(Chart.outerWidth).toEqual(jasmine.any(Number));
      expect(Chart._slice).toEqual(jasmine.any(Function));
      expect(Chart._axes).toEqual(jasmine.any(Object));
      expect(Chart._axes.x).toEqual(jasmine.any(Object));
      expect(Chart._axes.x.dimension).toEqual(jasmine.any(String));
      expect(Chart._axes.x.frame).toEqual(jasmine.any(Array));
      expect(Chart._axes.x.frame.length).toEqual(2);
      expect(Chart._axes.y).toEqual(jasmine.any(Object));
      expect(Chart._axes.y.dimension).toEqual(jasmine.any(String));
      expect(Chart._axes.y.frame).toEqual(jasmine.any(Array));
      expect(Chart._axes.y.frame.length).toEqual(2);
      expect(Chart.discoverRange).toEqual(jasmine.any(Function));
      expect(Chart.renderers).toEqual(jasmine.any(Array));
      expect(Chart.series).toEqual(jasmine.any(Array));
      expect(Chart.updateCallbacks).toEqual(jasmine.any(Array));
      expect(Chart.updateCallbacks[0]).toEqual(jasmine.any(Function));
      expect(Chart.updateCallbacks[1]).toEqual(jasmine.any(Function));
      return expect(Chart.addSeries).toEqual(jasmine.any(Function));
    });
    return describe('series', function() {
      it('addSeries', function() {
        Chart.addSeries({
          name: "enemies",
          renderer: "line",
          color: "#c05020",
          tooltip: function(d) {
            return d.y + " enemies";
          },
          dataTransform: function(d) {
            return {
              x: d.x,
              y: d.y
            };
          }
        });
        expect(Chart.series[Chart.series.length - 1].name).toBe('enemies');
        expect(Chart.series[Chart.series.length - 1].renderer).toBe('line');
        expect(Chart.series[Chart.series.length - 1].color).toBe('#c05020');
        expect(Chart.series[Chart.series.length - 1].tooltip).toEqual(jasmine.any(Function));
        return expect(Chart.series[Chart.series.length - 1].dataTransform).toEqual(jasmine.any(Function));
      });
      it("Chart: check for all series don't disabled", function() {
        var res;
        res = Chart._allSeriesDisabled();
        return expect(res).toEqual(false);
      });
      it("Chart: check for disable all series", function() {
        var res;
        console.log(Chart.series);
        _.each(Chart.series, function(s) {
          return s.disable();
        });
        res = Chart._allSeriesDisabled();
        return expect(res).toEqual(true);
      });
      it("Chart: check height function", function() {
        Chart = Chart.height(450);
        Chart.update();
        return expect(Chart.height()).toEqual(450 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
      });
      it("Chart: check setSize function", function() {
        Chart.setSize({
          width: 720,
          height: 420
        });
        Chart.update();
        expect(Chart.width()).toEqual(720 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
        return expect(Chart.height()).toEqual(420 - Chart.margin.top - Chart.margin.bottom - Chart.padding.top - Chart.padding.bottom);
      });
      it("Chart: check width function", function() {
        Chart = Chart.width(700);
        Chart.update();
        return expect(Chart.width()).toEqual(700 - Chart.margin.left - Chart.margin.right - Chart.padding.left - Chart.padding.right);
      });
      it("Tooltip: spotlightOn function should be turn on spotlight", function() {
        Tactile.Tooltip.spotlightOn();
        return expect(Tactile.Tooltip.getSpotlight()).toEqual(true);
      });
      it("Tooltip: turnOffspotlight function should be turn off spotlight", function() {
        Tactile.Tooltip.turnOffspotlight();
        return expect(Tactile.Tooltip.getSpotlight()).toEqual(false);
      });
      it('Tactile.Chart().render is function', function() {
        return expect(Chart.render).toEqual(jasmine.any(Function));
      });
      it('Tactile.Chart().initSeriesStackData is function', function() {
        return expect(Chart.initSeriesStackData).toEqual(jasmine.any(Function));
      });
      return it('Tactile.Chart().element is function', function() {
        return expect(Chart.element).toEqual(jasmine.any(Function));
      });
    });
  });
});
